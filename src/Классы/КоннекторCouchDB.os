#Использовать entity
#Использовать logos

#Область ОписаниеПеременных
Перем Сессия; // Сессия - Сессия для работы с БД. см. Сессия в 1connector.
Перем Лог; // Лог - Логгер.
#КонецОбласти

#Область ОбработчикиСобытий
Процедура ПриСозданииОбъекта()
	Лог.Информация("Создание коннектора к CouchDB");
КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейс
// Открыть соединение с БД.
//
// Параметры:
//   СтрокаСоединения - Строка - URL адрес базы данных.
//   ПараметрыКоннектора - Массив - Дополнительные параметры инициализации коннектора.
//
Процедура Открыть(СтрокаСоединения, ПараметрыКоннектора) Экспорт
	Лог.Информация("Открытие соединения с БД: %1", СтрокаСоединения);
	
	ДанныеАвторизацииНайдены = Ложь;
	Для Каждого Элемент Из ПараметрыКоннектора Цикл
		
		ЭтоДанныеАвторизации = Истина
			И ТипЗнч(Элемент) = Тип("Структура")
			И Элемент.Свойство("Авторизация")
			И Элемент.Авторизация.Количество() > 0;
		
		Если ЭтоДанныеАвторизации Тогда
			ДанныеАвторизацииНайдены = Истина;
			ДанныеАвторизации = Элемент.Авторизация;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ДанныеАвторизацииНайдены Тогда
		Лог.Информация("Не найдены данные авторизации для соединения с БД: %1", СтрокаСоединения);
		Возврат;
	КонецЕсли;
	
	Сессия = Новый СессияБД(СтрокаСоединения, ДанныеАвторизации);
КонецПроцедуры

// Закрыть соединение с БД.
//
Процедура Закрыть() Экспорт
	Если Сессия = Неопределено Тогда
		Лог.Информация("Соединение с БД не установлено.");
		Возврат;
	КонецЕсли;

	Сессия.Закрыть();
	Сессия = Неопределено;
КонецПроцедуры

// Получить статус соединения с БД.
//
//  Возвращаемое значение:
//   Булево - Состояние соединения. Истина, если соединение установлено и готово к использованию.
//       В обратном случае - Ложь.
//
Функция Открыт() Экспорт
	Если Сессия = Неопределено Тогда
		Лог.Информация("Соединение с БД не установлено.");
		Возврат Ложь;
	КонецЕсли;

	Возврат Сессия.Открыт();
КонецФункции

// Сохраняет сущность в БД.
//
// Параметры:
//   ОбъектМодели - ОбъектМодели - Объект, содержащий описание класса-сущности и настроек таблицы БД.
//   Сущность - Произвольный - Объект (экземпляр класса, зарегистрированного в модели) для сохранения в БД.
//
Процедура Сохранить(ОбъектМодели, Сущность) Экспорт
	Если Сессия = Неопределено Тогда
		Лог.Информация("Соединение с БД не установлено.");
		Возврат;
	КонецЕсли;

	// TO DO
	// Реализовать наполнение пользовательских полей, которые описаны в ОбъектМодели.
	Если ОбъектМодели.ТипСущности() = тип("БазаДанных") Тогда
		Сессия.СоздатьБазуДанных(Сущность.Имя);
	ИначеЕсли ОбъектМодели.ТипСущности() = тип("Документ") Тогда
		Сессия.СоздатьДокумент(Сущность.Имя, Сущность.БазаДанных);
	ИначеЕсли ОбъектМодели.ТипСущности() = тип("Вложение") Тогда
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ТипДанных", Сущность.ТипДанных);
		Если Сущность.ТипДанных = Тип("Строка") Тогда
			СтруктураДанных.Вставить("Данные", Сущность.ДанныеСтрока);
		ИначеЕсли Сущность.ТипДанных = Тип("ДвоичныеДанные") Тогда
			СтруктураДанных.Вставить("Данные", Сущность.ДвоичныеДанные);
		Иначе
			Лог.Информация("Неизвестный тип данных для вложения: %1", Сущность.ТипДанных);
			Возврат;
		КонецЕсли;
		Сессия.СоздатьВложение(Сущность.Имя, Сущность.Документ, Сущность.БазаДанных, СтруктураДанных);
	Иначе
		Лог.Информация("Неизвестный тип сущности для: %1", ОбъектМодели.ТипСущности());
	КонецЕсли;
КонецПроцедуры

// Удаляет сущность из таблицы БД.
//
// Параметры:
//   ОбъектМодели - ОбъектМодели - Объект, содержащий описание класса-сущности и настроек таблицы БД.
//   Сущность - Произвольный - Объект (экземпляр класса, зарегистрированного в модели) для удаления из БД.
//
Процедура Удалить(ОбъектМодели, Сущность) Экспорт
	Если Сессия = Неопределено Тогда
		Лог.Информация("Соединение с БД не установлено.");
		Возврат;
	КонецЕсли;

	Если ОбъектМодели.ТипСущности() = тип("БазаДанных") Тогда
		Сессия.УдалитьБазуДанных(Сущность.Имя);
	ИначеЕсли ОбъектМодели.ТипСущности() = тип("Документ") Тогда
		Сессия.УдалитьДокумент(Сущность.Имя, Сущность.БазаДанных);	
	ИначеЕсли ОбъектМодели.ТипСущности() = тип("Вложение") Тогда
		Сессия.УдалитьВложение(Сущность.Имя, Сущность.Документ, Сущность.БазаДанных);
	Иначе
		Лог.Информация("Неизвестный тип сущности: %1", ОбъектМодели.ТипСущности());
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Осуществляет поиск строк в таблице по указанному отбору.
//
// Параметры:
//   ОбъектМодели - ОбъектМодели - Объект, содержащий описание класса-сущности и настроек таблицы БД.
//   Отбор - Массив - Отбор для поиска. Каждый элемент массива должен иметь тип "ЭлементОтбора".
//       Каждый элемент отбора преобразуется к условию поиска. В качестве "ПутьКДанным" указываются имена колонок.
//
//  Возвращаемое значение:
//   Массив - Массив, элементами которого являются "Соответствия". Ключом элемента соответствия является имя колонки,
//     значением элемента соответствия - значение колонки.
//
Функция НайтиСтрокиВТаблице(ОбъектМодели, Отбор = Неопределено) Экспорт
	Если Сессия = Неопределено Тогда
		Лог.Информация("Соединение с БД не установлено.");
		Возврат Новый Массив;
	КонецЕсли;

	Если ОбъектМодели.ТипСущности() = тип("БазаДанных") Тогда
		Возврат ПолучитьБазыДанных(Отбор);
	ИначеЕсли ОбъектМодели.ТипСущности() = тип("Документ") Тогда
		Возврат ПолучитьДокументы(Отбор);
	ИначеЕсли ОбъектМодели.ТипСущности() = тип("Вложение") Тогда
		Возврат ПолучитьВложения(Отбор);
	Иначе
		Лог.Информация("Неизвестный тип сущности: %1", ОбъектМодели.ТипСущности());
		Возврат Новый Массив;
	КонецЕсли;
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьБазыДанных(Отбор)
	МассивИменБазДанных = Новый Массив;

	Для Каждого Элемент Из Отбор Цикл
		Если Элемент.ПутьКДанным = "Имя" Тогда
			МассивИменБазДанных.Добавить(Элемент.Значение);
		Иначе
			Лог.Информация("Неизвестный путь к данным: %1", Элемент.ПутьКДанным);
		КонецЕсли;
	КонецЦикла;
	
	Ответ = Сессия.НайтиБазыДанных(МассивИменБазДанных);

	Если Не ЗначениеЗаполнено(Ответ.КодСостояния) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(Ответ.Текст());
	Данные = ПрочитатьJSON(Чтение, Истина);
	Чтение.Закрыть();
	
	МассивЗначений = Новый Массив;
	
	Для Каждого ОписаниеБазы Из Данные Цикл
		Если ОписаниеБазы["info"] <> Неопределено Тогда
			Информация = ОписаниеБазы["info"];
			База = Новый Соответствие;
			База.Вставить("Имя", Информация["db_name"]);
			База.Вставить("Размер", Информация["sizes"]);
			База.Вставить("КоличествоДокументов", Информация["doc_count"]);

			МассивЗначений.Добавить(База);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЗначений;
КонецФункции

Функция ПолучитьДокументы(Отбор)
	БазаДанных = Неопределено;
	Селектор = Новый Структура("selector", Новый Соответствие);
	Для Каждого Элемент Из Отбор Цикл
		Если Элемент.ПутьКДанным = "Имя" Тогда
			Селектор.selector.Вставить("_id", Элемент.Значение);
		ИначеЕсли Элемент.ПутьКДанным = "Ревизия" Тогда
			Селектор.selector.Вставить("_rev", Элемент.Значение);
		ИначеЕсли Элемент.ПутьКДанным = "БазаДанных" Тогда
			БазаДанных = Элемент.Значение;
		Иначе
			Селектор.selector.Вставить(Элемент.ПутьКДанным, Элемент.Значение);
		КонецЕсли;	
	КонецЦикла;

	МассивЗначений = Новый Массив;
	Если БазаДанных = Неопределено Тогда
		Лог.Информация("Отбор для документов должен содержать элемент с путем к данным БазаДанных.");
		Возврат МассивЗначений;
	КонецЕсли;

	Ответ = Сессия.НайтиДокументы(БазаДанных, Селектор);

	Если Не ЗначениеЗаполнено(Ответ.КодСостояния) Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(Ответ.Текст());
	Данные = ПрочитатьJSON(Чтение, Истина);
	Чтение.Закрыть();

	Если Данные["docs"] = Неопределено Тогда
		Лог.Информация("Не удалось получить данные документов.");
		Возврат МассивЗначений;
	КонецЕсли;

	Для Каждого ОписаниеДокумента Из Данные["docs"] Цикл
		Документ = Новый Соответствие;
		Документ.Вставить("Имя", ОписаниеДокумента["_id"]);
		Документ.Вставить("Ревизия", ОписаниеДокумента["_rev"]);
		Документ.Вставить("БазаДанных", БазаДанных);
		МассивЗначений.Добавить(Документ);
	КонецЦикла;

	Возврат МассивЗначений;
КонецФункции

Функция ПолучитьВложения(Отбор) 
	БазаДанных = Неопределено;
	Документ = Неопределено;
	ИмяВложения = Неопределено;
	ДополнительныеПараметры = Новый Структура("selector", Новый Соответствие);
	Для Каждого Элемент Из Отбор Цикл
		Если Элемент.ПутьКДанным = "Имя" Тогда
			ИмяВложения = Элемент.Значение;
		ИначеЕсли Элемент.ПутьКДанным = "БазаДанных" Тогда
			БазаДанных = Элемент.Значение;
		ИначеЕсли Элемент.ПутьКДанным = "Документ" Тогда
			Документ = Элемент.Значение;
		Иначе
			ДополнительныеПараметры.selector.Вставить(Элемент.ПутьКДанным, Элемент.Значение);
		КонецЕсли;	
	КонецЦикла;

	МассивЗначений = Новый Массив;
	Если БазаДанных = Неопределено Тогда
		Лог.Информация("Отбор для вложений должен содержать элемент с путем к данным БазаДанных.");
		Возврат МассивЗначений;
	КонецЕсли;

	Если Документ = Неопределено Тогда
		Лог.Информация("Отбор для вложений должен содержать элемент с путем к данным Документ.");
		Возврат МассивЗначений;
	КонецЕсли;

	Селектор = Новый Структура("selector", Новый Соответствие);
	Селектор.selector.Вставить("_id", Документ);
	Ответ = Сессия.НайтиДокументы(БазаДанных, Селектор);

	Если Не ЗначениеЗаполнено(Ответ.КодСостояния) Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(Ответ.Текст());
	Данные = ПрочитатьJSON(Чтение, Истина);
	Чтение.Закрыть();

	Если Данные["docs"] = Неопределено Тогда
		Возврат МассивЗначений;
	КонецЕсли;

	Для Каждого ОписаниеДокумента Из Данные["docs"] Цикл
		Для Каждого Вложение Из ОписаниеДокумента["_attachments"] Цикл
			Если Вложение.Ключ <> ИмяВложения Тогда
				Продолжить;
			КонецЕсли;
			ДанныеВложения = Вложение.Значение;
			Поля = Новый Соответствие;
			Поля.Вставить("Имя", ИмяВложения);
			Поля.Вставить("Длина", ДанныеВложения["length"]);
			Поля.Вставить("Хэш", ДанныеВложения["digest"]);
			Поля.Вставить("Документ", Документ);
			Поля.Вставить("БазаДанных", БазаДанных);
	
			Ответ = Сессия.НайтиВложения(ИмяВложения, Документ, БазаДанных);

			Если Не ЗначениеЗаполнено(Ответ.КодСостояния) Тогда
				Продолжить;
			КонецЕсли;

			Заголовок = "content_type";
			Если ДанныеВложения[Заголовок] = "text/plain" Тогда
				Поля.Вставить("ТипДанных", Тип("Строка"));
				Поля.Вставить("ДанныеСтрока", Ответ.Текст());
			ИначеЕсли ДанныеВложения[Заголовок] = "application/octet-stream" Тогда
				Поля.Вставить("ТипДанных", Тип("ДвоичныеДанные"));
				Поля.Вставить("ДвоичныеДанные", Ответ.ДвоичныеДанные());
			Иначе
				Лог.Информация("Неизвестный тип данных вложения: %1", ДанныеВложения[Заголовок]);
			КонецЕсли;

			МассивЗначений.Добавить(Поля);
		КонецЦикла;
	КонецЦикла;

	Возврат МассивЗначений;
КонецФункции

#КонецОбласти

#Область НеРеализованныеПроцедурыИФункции
// Начинает новую транзакцию в БД.
//
Процедура НачатьТранзакцию() Экспорт
КонецПроцедуры

// Фиксирует открытую транзакцию в БД.
//
Процедура ЗафиксироватьТранзакцию() Экспорт
КонецПроцедуры

// Отменяет открытую транзакцию в БД.
//
Процедура ОтменитьТранзакцию() Экспорт
КонецПроцедуры

// Создает таблицу в БД по данным модели.
//
// Параметры:
//   ОбъектМодели - ОбъектМодели - Объект, содержащий описание класса-сущности и настроек таблицы БД.
//
Процедура ИнициализироватьТаблицу(ОбъектМодели) Экспорт
КонецПроцедуры

// Удаляет строки в таблице по указанному отбору.
//
// Параметры:
//   ОбъектМодели - ОбъектМодели - Объект, содержащий описание класса-сущности и настроек таблицы БД.
//   Отбор - Массив - Отбор для поиска. Каждый элемент массива должен иметь тип "ЭлементОтбора".
//       Каждый элемент отбора преобразуется к условию поиска. В качестве "ПутьКДанным" указываются имена колонок.
//
Процедура УдалитьСтрокиВТаблице(ОбъектМодели, Знач Отбор) Экспорт
КонецПроцедуры
#КонецОбласти

#Область Инициализация
Лог = Логирование.ПолучитьЛог("oscript.entity.couchdb.connector");
#КонецОбласти