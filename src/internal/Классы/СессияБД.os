#Использовать 1connector
#Использовать logos

#Область Переменные
Перем Сессия; // Объект сессия из 1connector
Перем Лог; // Объект логирования из logos
Перем АдресБД; // Адрес базы данных
Перем Авторизация; // Структура - Данные авторизации.
#КонецОбласти

#Область ОбработчикиСобытий
Процедура ПриСозданииОбъекта(СтрокаСоединения, ДанныеАвторизации)
	Сессия = Новый Сессия();
	Сессия.Заголовки["Accept"] = "application/json";

	АдресБД = СтрокаСоединения;
	Авторизация = ДанныеАвторизации;
	Авторизоваться();
КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция Открыт() Экспорт
	Если Сессия = Неопределено Тогда
		Лог.Информация("Нет активной сессии. Необходимо открыть коннектор");
		Возврат Ложь;
	КонецЕсли;

	Если Не Авторизован() Тогда
		Лог.Информация("Авторизация не выполнена. Выполняю авторизацию");
		Авторизоваться();
	КонецЕсли;

	Если Не Авторизован() Тогда
		Лог.Информация("Сессия не действительна. Не удалось авторизоваться. Необходимо открыть коннектор");
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Процедура Закрыть() Экспорт
	Лог.Информация("Закрытие соединения с БД: %1", АдресБД);

	Если Не Открыт() Тогда
		Лог.Информация("Соединение с БД не было открыто.");
		Возврат;
	КонецЕсли;

	Адрес = СтрШаблон("%1/_session", АдресБД);
	Сессия.ВызватьМетод("DELETE", Адрес);
	Сессия = Неопределено;
КонецПроцедуры

Процедура СоздатьБазуДанных(ИмяБазыДанных) Экспорт
	Лог.Информация("Создание БД: %1", ИмяБазыДанных);
	Если Ложь
		Или Не Открыт()
		Или БазаДанныхСуществует(ИмяБазыДанных)  Тогда
		Возврат;
	КонецЕсли;

	Адрес = СтрШаблон("%1/%2", АдресБД, ИмяБазыДанных);
	Ответ = Сессия.ВызватьМетод("PUT", Адрес);
	
	// TO DO
	// Избавиться от магических чисел
	Если Ответ.КодСостояния <> 200 И Ответ.КодСостояния <> 201 Тогда
		Лог.Информация("Не удалось создать БД: %1, код состояния %2", ИмяБазыДанных, Ответ.КодСостояния);
	Иначе
		Лог.Информация("БД создана: %1", ИмяБазыДанных);
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьБазуДанных(ИмяБазыДанных) Экспорт
	Лог.Информация("Удаление БД: %1", ИмяБазыДанных);
	Если Ложь
		Или Не Открыт() 
		Или Не БазаДанныхСуществует(ИмяБазыДанных) Тогда
		Возврат;
	КонецЕсли;

	Адрес = СтрШаблон("%1/%2", АдресБД, ИмяБазыДанных);
	Ответ = Сессия.ВызватьМетод("DELETE", Адрес);
	
	// TO DO
	// Избавиться от магического числа
	Если Ответ.КодСостояния <> 200 И Ответ.КодСостояния <> 201 Тогда
		Лог.Информация("Не удалось удалить БД: %1, код состояния %2", ИмяБазыДанных, Ответ.КодСостояния);
	Иначе
		Лог.Информация("БД удалена: %1", ИмяБазыДанных);
	КонецЕсли;
КонецПроцедуры

Функция НайтиБазыДанных(МассивИменБазДанных) Экспорт
   	Лог.Информация("Поиск БД");
	Если Не Открыт() Тогда
		Возврат Новый ПодготовленныйОтвет(Неопределено, Неопределено);
	КонецЕсли;

	Если МассивИменБазДанных.Количество() = 0 Тогда
		Адрес = СтрШаблон("%1/_all_dbs", АдресБД);
		Ответ = Сессия.ВызватьМетод("GET", Адрес);
	Иначе
		Ключи = Новый Структура("keys", МассивИменБазДанных);
		ДополнительныеПараметры = Новый Структура("JSON", Ключи);
		Адрес = СтрШаблон("%1/_dbs_info", АдресБД);
		Ответ = Сессия.ВызватьМетод("POST", Адрес, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Ответ.КодСостояния <> 200 И Ответ.КодСостояния <> 201 Тогда
		Лог.Информация("Не удалось получить список БД, код состояния %1", Ответ.КодСостояния);
	Иначе
		Лог.Информация("Список БД получен");
	КонецЕсли;

	Возврат Ответ;
КонецФункции

Процедура СоздатьДокумент(ИмяДокумента, ИмяБазыДанных) Экспорт
	Лог.Информация("Создание документа: %1", ИмяДокумента);
	Если Ложь
		Или Не Открыт()
		Или Не БазаДанныхСуществует(ИмяБазыДанных) Тогда
		Возврат;
	КонецЕсли;

	Если ДокументСуществует(ИмяДокумента, ИмяБазыДанных) Тогда
		Лог.Информация("Документ уже существует: %1", ИмяДокумента);
		Возврат;
	КонецЕсли;

	// TO DO
	// Добавить возможность изменения существующих документов	
	Адрес = СтрШаблон("%1/%2/%3", АдресБД, ИмяБазыДанных, ИмяДокумента);
	ДополнительныеПараметры = Новый Структура("JSON", Новый Соответствие);
	ДополнительныеПараметры.JSON.Вставить("Имя", ИмяДокумента);
	Ответ = Сессия.ВызватьМетод("PUT", Адрес, ДополнительныеПараметры);
	
	// TO DO
	// Избавиться от магических чисел
	Если Ответ.КодСостояния <> 200 И Ответ.КодСостояния <> 201 Тогда
		Лог.Информация("Не удалось создать документ: %1, код состояния %2", ИмяДокумента, Ответ.КодСостояния);
	Иначе
		Лог.Информация("Документ создан: %1", ИмяДокумента);
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьДокумент(ИмяДокумента, ИмяБазыДанных) Экспорт
	Лог.Информация("Удаление документа: %1", ИмяДокумента);
	Если Ложь
		Или Не Открыт()
		Или Не БазаДанныхСуществует(ИмяБазыДанных) Тогда
		Возврат;
	КонецЕсли;

	Если Не ДокументСуществует(ИмяДокумента, ИмяБазыДанных) Тогда
		Возврат;
	КонецЕсли;
	
	Адрес = СтрШаблон("%1/%2/%3", АдресБД, ИмяБазыДанных, ИмяДокумента);
	Ответ = Сессия.ВызватьМетод("DELETE", Адрес);
	
	// TO DO
	// Избавиться от магических чисел
	Если Ответ.КодСостояния <> 200 И Ответ.КодСостояния <> 201 Тогда
		Лог.Информация("Не удалось удалить документ: %1, код состояния %2", ИмяДокумента, Ответ.КодСостояния);
	Иначе
		Лог.Информация("Документ удален: %1", ИмяДокумента);
	КонецЕсли;
КонецПроцедуры

Функция НайтиДокументы(ИмяБазыДанных, Отбор) Экспорт
	Если Ложь
		Или Не Открыт()
		Или Не БазаДанныхСуществует(ИмяБазыДанных) Тогда
		Возврат Новый ПодготовленныйОтвет(Неопределено, Неопределено);
	КонецЕсли;

	Адрес = СтрШаблон("%1/%2/_find", АдресБД, ИмяБазыДанных);
	Если Отбор.selector.Количество() = 0 Тогда
		Ответ = Сессия.ВызватьМетод("POST", Адрес);
	Иначе
		ДополнительныеПараметры = Новый Структура("JSON", Отбор);
		Ответ = Сессия.ВызватьМетод("POST", Адрес, ДополнительныеПараметры);
	КонецЕсли;

	Если Ответ.КодСостояния <> 200 И Ответ.КодСостояния <> 201 Тогда
		Лог.Информация("Не удалось получить список документов, код состояния %1", Ответ.КодСостояния);
		Возврат Новый ПодготовленныйОтвет(Неопределено, Неопределено);
	Иначе
		Лог.Информация("Список документов получен");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Процедура СоздатьВложение(ИмяВложения, ИмяДокумента, ИмяБазыДанных, СтруктураДанных) Экспорт
	Лог.Информация("Создание вложения: %1", ИмяВложения);
	Если Ложь
		Или Не Открыт()
		Или Не БазаДанныхСуществует(ИмяБазыДанных) 
		Или Не ДокументСуществует(ИмяДокумента, ИмяБазыДанных) Тогда
		Возврат;
	КонецЕсли;

	Селектор = Новый Структура("selector", Новый Соответствие);
	Селектор.selector.Вставить("_id", ИмяДокумента);
	Адрес = СтрШаблон("%1/%2/_find", АдресБД, ИмяБазыДанных);
	ДополнительныеПараметры = Новый Структура("JSON", Селектор);
	Ответ = Сессия.ВызватьМетод("POST", Адрес, ДополнительныеПараметры);

	Тело = Ответ.Текст();

	Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(Тело);
	Данные = ПрочитатьJSON(Чтение, Истина);
	Чтение.Закрыть();

	Ревизия = Данные["docs"][0]["_rev"];
	
	Адрес = СтрШаблон("%1/%2/%3/%4", АдресБД, ИмяБазыДанных, ИмяДокумента, ИмяВложения);
		
	ДополнительныеПараметры = Новый Структура;
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("If-Match", Ревизия);
	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	ДополнительныеПараметры.Вставить("Данные", СтруктураДанных.Данные);
	
	Если СтруктураДанных.ТипДанных = тип("Строка") Тогда
		Заголовки.Вставить("Content-Type", "text/plain");
	ИначеЕсли СтруктураДанных.ТипДанных = Тип("ДвоичныеДанные") Тогда
		Заголовки.Вставить("Content-Type", "application/octet-stream");
	Иначе
		Заголовки.Вставить("Content-Type", "application/json");
	КонецЕсли;
	
	Ответ = Сессия.ВызватьМетод("PUT", Адрес, ДополнительныеПараметры);
			
	Если Ответ.КодСостояния <> 200 И Ответ.КодСостояния <> 201 Тогда
		Лог.Информация("Не удалось создать вложение: %1, код состояния %2", ИмяВложения, Ответ.КодСостояния);
	Иначе
		Лог.Информация("Вложение создано: %1", ИмяВложения);
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьВложение(ИмяВложения, ИмяДокумента, ИмяБазыДанных) Экспорт
	Адрес = СтрШаблон("%1/%2/%3/%4", АдресБД, ИмяБазыДанных, ИмяДокумента, ИмяВложения);
	
	Ответ = Сессия.ВызватьМетод("DELETE", Адрес);

	Если Ответ.КодСостояния <> 200 И Ответ.КодСостояния <> 201 Тогда
		Лог.Информация("Не удалось удалить вложение: %1, код состояния %2", ИмяВложения, Ответ.КодСостояния);
	Иначе
		Лог.Информация("Вложение удалено: %1", ИмяВложения);
	КонецЕсли;
КонецПроцедуры

Функция НайтиВложения(ИмяВложения, ИмяДокумента, ИмяБазыДанных) Экспорт
	Если Ложь
		Или Не Открыт()
		Или Не БазаДанныхСуществует(ИмяБазыДанных) 
		Или Не ДокументСуществует(ИмяДокумента, ИмяБазыДанных) Тогда
		Возврат Новый ПодготовленныйОтвет(Неопределено, Неопределено);
	КонецЕсли;

	Адрес = СтрШаблон("%1/%2/%3/%4", АдресБД, ИмяБазыДанных, ИмяДокумента, ИмяВложения);
	Ответ = Сессия.ВызватьМетод("GET", Адрес);

	Если Ответ.КодСостояния <> 200 И Ответ.КодСостояния <> 201 Тогда
		Лог.Информация("Не удалось получить вложение: %1, код состояния %2", ИмяВложения, Ответ.КодСостояния);
		Возврат Новый ПодготовленныйОтвет(Неопределено, Неопределено);
	Иначе
		Лог.Информация("Вложение получено: %1", ИмяВложения);
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура Авторизоваться()
	ДополнительныеПараметры = Новый Структура("JSON", Авторизация);
	Адрес = СтрШаблон("%1/_session", АдресБД);
	Ответ = Сессия.ВызватьМетод("POST", Адрес, ДополнительныеПараметры);
	Сессия.Cookies = Ответ.Cookies;
КонецПроцедуры

Функция Авторизован()
	Адрес = СтрШаблон("%1/_session", АдресБД);
	Ответ = Сессия.ВызватьМетод("GET", Адрес);
	
	Результат = Ответ.Json();
	Возврат Результат["userCtx"]["name"] <> null;
КонецФункции

Функция БазаДанныхСуществует(ИмяБазыДанных)
	Адрес = СтрШаблон("%1/%2", АдресБД, ИмяБазыДанных);
	Ответ = Сессия.ВызватьМетод("HEAD", Адрес);
	
	// TO DO
	// Избавиться от магического числа
	Существует = Ответ.КодСостояния = 200;
	Если Существует Тогда
		Лог.Информация("БД уже существует: %1", ИмяБазыДанных);
	КонецЕсли;

	Возврат Существует;
КонецФункции

Функция ЗаполненоИмяДокумента(ИмяДокумента)
	Если Не ЗначениеЗаполнено(ИмяДокумента) Тогда
		Лог.Информация("Документ должен содержать имя.");
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция ДокументСуществует(ИмяДокумента, ИмяБазыДанных)
	Если Не ЗаполненоИмяДокумента(ИмяДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Адрес = СтрШаблон("%1/%2/%3", АдресБД, ИмяБазыДанных, ИмяДокумента);
	Ответ = Сессия.ВызватьМетод("HEAD", Адрес);
	
	// TO DO
	// Избавиться от магического числа
	Существует = Ответ.КодСостояния = 200;

	Если Не Существует Тогда
		Лог.Информация("Документ не существует: %1", ИмяДокумента);
	КонецЕсли;

	Возврат Существует;
КонецФункции
#КонецОбласти

#Область Инициализация
Лог = Логирование.ПолучитьЛог("oscript.entity.couchdb.session");
#КонецОбласти